
0_led_toggle_addr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000388  08000390  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000388  08000388  00001390  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000388  08000388  00001390  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000388  08000390  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000388  08000388  00001388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800038c  0800038c  0000138c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000390  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000390  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY
 12 .debug_info   000001f2  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000ef  00000000  00000000  000015b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  000016a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fdc  00000000  00000000  0000171d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000052d  00000000  00000000  000026f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003e1d  00000000  00000000  00002c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006a43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00006a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00006ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000370 	.word	0x08000370

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000370 	.word	0x08000370

080001d8 <main>:
#define RCC		((RCC_TypeDef*) RCC_BASE)
#define GPIOA	((GPIO_TypeDef*) GPIOA_BASE)


int main(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b087      	sub	sp, #28
 80001dc:	af00      	add	r7, sp, #0
	// enable clock access to GPIOA
	// |= sets only the bit to change (friendly programming)
	RCC->AHB1ENR |= GPIOAEN;
 80001de:	4b39      	ldr	r3, [pc, #228]	@ (80002c4 <main+0xec>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e2:	4a38      	ldr	r2, [pc, #224]	@ (80002c4 <main+0xec>)
 80001e4:	f043 0301 	orr.w	r3, r3, #1
 80001e8:	6313      	str	r3, [r2, #48]	@ 0x30

	// set PA5 as output pin
	GPIOA->MODER &=~(3U<<10);	// Clears bit 11:10
 80001ea:	4b37      	ldr	r3, [pc, #220]	@ (80002c8 <main+0xf0>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a36      	ldr	r2, [pc, #216]	@ (80002c8 <main+0xf0>)
 80001f0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001f4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<10);	// Set bit 10 to 1
 80001f6:	4b34      	ldr	r3, [pc, #208]	@ (80002c8 <main+0xf0>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a33      	ldr	r2, [pc, #204]	@ (80002c8 <main+0xf0>)
 80001fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000200:	6013      	str	r3, [r2, #0]

	while (1)
	{
		GPIOA->ODR |= (1U<<5);
 8000202:	4b31      	ldr	r3, [pc, #196]	@ (80002c8 <main+0xf0>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a30      	ldr	r2, [pc, #192]	@ (80002c8 <main+0xf0>)
 8000208:	f043 0320 	orr.w	r3, r3, #32
 800020c:	6153      	str	r3, [r2, #20]
		for(int i=0; i<1000000; i++){}
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]
 8000212:	e002      	b.n	800021a <main+0x42>
 8000214:	697b      	ldr	r3, [r7, #20]
 8000216:	3301      	adds	r3, #1
 8000218:	617b      	str	r3, [r7, #20]
 800021a:	697b      	ldr	r3, [r7, #20]
 800021c:	4a2b      	ldr	r2, [pc, #172]	@ (80002cc <main+0xf4>)
 800021e:	4293      	cmp	r3, r2
 8000220:	ddf8      	ble.n	8000214 <main+0x3c>

		GPIOA->ODR &= ~(1U<<5);
 8000222:	4b29      	ldr	r3, [pc, #164]	@ (80002c8 <main+0xf0>)
 8000224:	695b      	ldr	r3, [r3, #20]
 8000226:	4a28      	ldr	r2, [pc, #160]	@ (80002c8 <main+0xf0>)
 8000228:	f023 0320 	bic.w	r3, r3, #32
 800022c:	6153      	str	r3, [r2, #20]
		for(int i=0; i<100000; i++){}
 800022e:	2300      	movs	r3, #0
 8000230:	613b      	str	r3, [r7, #16]
 8000232:	e002      	b.n	800023a <main+0x62>
 8000234:	693b      	ldr	r3, [r7, #16]
 8000236:	3301      	adds	r3, #1
 8000238:	613b      	str	r3, [r7, #16]
 800023a:	693b      	ldr	r3, [r7, #16]
 800023c:	4a24      	ldr	r2, [pc, #144]	@ (80002d0 <main+0xf8>)
 800023e:	4293      	cmp	r3, r2
 8000240:	ddf8      	ble.n	8000234 <main+0x5c>

		GPIOA->ODR |= (1U<<5);
 8000242:	4b21      	ldr	r3, [pc, #132]	@ (80002c8 <main+0xf0>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	4a20      	ldr	r2, [pc, #128]	@ (80002c8 <main+0xf0>)
 8000248:	f043 0320 	orr.w	r3, r3, #32
 800024c:	6153      	str	r3, [r2, #20]
		for(int i=0; i<100000; i++){}
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	e002      	b.n	800025a <main+0x82>
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	3301      	adds	r3, #1
 8000258:	60fb      	str	r3, [r7, #12]
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	4a1c      	ldr	r2, [pc, #112]	@ (80002d0 <main+0xf8>)
 800025e:	4293      	cmp	r3, r2
 8000260:	ddf8      	ble.n	8000254 <main+0x7c>

		GPIOA->ODR &= ~(1U<<5);
 8000262:	4b19      	ldr	r3, [pc, #100]	@ (80002c8 <main+0xf0>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	4a18      	ldr	r2, [pc, #96]	@ (80002c8 <main+0xf0>)
 8000268:	f023 0320 	bic.w	r3, r3, #32
 800026c:	6153      	str	r3, [r2, #20]
		for(int i=0; i<100000; i++){}
 800026e:	2300      	movs	r3, #0
 8000270:	60bb      	str	r3, [r7, #8]
 8000272:	e002      	b.n	800027a <main+0xa2>
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	3301      	adds	r3, #1
 8000278:	60bb      	str	r3, [r7, #8]
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	4a14      	ldr	r2, [pc, #80]	@ (80002d0 <main+0xf8>)
 800027e:	4293      	cmp	r3, r2
 8000280:	ddf8      	ble.n	8000274 <main+0x9c>

		GPIOA->ODR |= (1U<<5);
 8000282:	4b11      	ldr	r3, [pc, #68]	@ (80002c8 <main+0xf0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	4a10      	ldr	r2, [pc, #64]	@ (80002c8 <main+0xf0>)
 8000288:	f043 0320 	orr.w	r3, r3, #32
 800028c:	6153      	str	r3, [r2, #20]
		for(int i=0; i<100000; i++){}
 800028e:	2300      	movs	r3, #0
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	e002      	b.n	800029a <main+0xc2>
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3301      	adds	r3, #1
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a0c      	ldr	r2, [pc, #48]	@ (80002d0 <main+0xf8>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	ddf8      	ble.n	8000294 <main+0xbc>

		GPIOA->ODR &= ~(1U<<5);
 80002a2:	4b09      	ldr	r3, [pc, #36]	@ (80002c8 <main+0xf0>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a08      	ldr	r2, [pc, #32]	@ (80002c8 <main+0xf0>)
 80002a8:	f023 0320 	bic.w	r3, r3, #32
 80002ac:	6153      	str	r3, [r2, #20]
		for(int i=0; i<1000000; i++){}
 80002ae:	2300      	movs	r3, #0
 80002b0:	603b      	str	r3, [r7, #0]
 80002b2:	e002      	b.n	80002ba <main+0xe2>
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	3301      	adds	r3, #1
 80002b8:	603b      	str	r3, [r7, #0]
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	4a03      	ldr	r2, [pc, #12]	@ (80002cc <main+0xf4>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	ddf8      	ble.n	80002b4 <main+0xdc>
		GPIOA->ODR |= (1U<<5);
 80002c2:	e79e      	b.n	8000202 <main+0x2a>
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020000 	.word	0x40020000
 80002cc:	000f423f 	.word	0x000f423f
 80002d0:	0001869f 	.word	0x0001869f

080002d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d4:	480d      	ldr	r0, [pc, #52]	@ (800030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002dc:	480c      	ldr	r0, [pc, #48]	@ (8000310 <LoopForever+0x6>)
  ldr r1, =_edata
 80002de:	490d      	ldr	r1, [pc, #52]	@ (8000314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000318 <LoopForever+0xe>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e4:	e002      	b.n	80002ec <LoopCopyDataInit>

080002e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ea:	3304      	adds	r3, #4

080002ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f0:	d3f9      	bcc.n	80002e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f2:	4a0a      	ldr	r2, [pc, #40]	@ (800031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000320 <LoopForever+0x16>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f8:	e001      	b.n	80002fe <LoopFillZerobss>

080002fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002fc:	3204      	adds	r2, #4

080002fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000300:	d3fb      	bcc.n	80002fa <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000302:	f000 f811 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000306:	f7ff ff67 	bl	80001d8 <main>

0800030a <LoopForever>:

LoopForever:
  b LoopForever
 800030a:	e7fe      	b.n	800030a <LoopForever>
  ldr   r0, =_estack
 800030c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000318:	08000390 	.word	0x08000390
  ldr r2, =_sbss
 800031c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000320:	2000001c 	.word	0x2000001c

08000324 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC_IRQHandler>
	...

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	4d0d      	ldr	r5, [pc, #52]	@ (8000360 <__libc_init_array+0x38>)
 800032c:	4c0d      	ldr	r4, [pc, #52]	@ (8000364 <__libc_init_array+0x3c>)
 800032e:	1b64      	subs	r4, r4, r5
 8000330:	10a4      	asrs	r4, r4, #2
 8000332:	2600      	movs	r6, #0
 8000334:	42a6      	cmp	r6, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	4d0b      	ldr	r5, [pc, #44]	@ (8000368 <__libc_init_array+0x40>)
 800033a:	4c0c      	ldr	r4, [pc, #48]	@ (800036c <__libc_init_array+0x44>)
 800033c:	f000 f818 	bl	8000370 <_init>
 8000340:	1b64      	subs	r4, r4, r5
 8000342:	10a4      	asrs	r4, r4, #2
 8000344:	2600      	movs	r6, #0
 8000346:	42a6      	cmp	r6, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000350:	4798      	blx	r3
 8000352:	3601      	adds	r6, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	f855 3b04 	ldr.w	r3, [r5], #4
 800035a:	4798      	blx	r3
 800035c:	3601      	adds	r6, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	08000388 	.word	0x08000388
 8000364:	08000388 	.word	0x08000388
 8000368:	08000388 	.word	0x08000388
 800036c:	0800038c 	.word	0x0800038c

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
